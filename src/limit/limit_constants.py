CANONICAL_TOKENS = [
    # Arithmetic and logic ops
    "PLUS",
    "SUB",
    "MULT",
    "DIV",
    "MOD",
    "EQ",
    "NE",
    "LT",
    "LE",
    "GT",
    "GE",
    "AND",
    "OR",
    "NOT",
    # Expression constructs
    "CALL",
    "PROP",
    "ASSIGN",
    # Control structures
    "IF",
    "ELSE",
    "FUNC",
    "PRINT",
    "RETURN",
    "SKIP",
    "LOOP_WHILE",
    "LOOP_FOR",
    "DELIM_AT",
    "DELIM_BY",
    "DELIM_TO",
    "BREAK",
    "CONTINUE",
    # Class / object
    "CLASS",
    "EXTENDS",
    "NEW",
    "THIS",
    # Modules and exceptions
    "TRY",
    "CATCH",
    "FINALLY",
    "EXPORT",
    "IMPORT",
    "MODULE",
    # IO and literals
    "INPUT",
    "DELIM_FROM",
    "TRUE",
    "FALSE",
    "NULL",
    # Brackets / delimiters
    "LBRACK",
    "RBRACK",
    "LBRACE",
    "RBRACE",
    "LPAREN",
    "RPAREN",
    "COMMA",
    "COLON",
    "DOT",
    # Primitive token types
    "EOF",
    "IDENT",
    "ERROR",
    "NUMBER",
    "FLOAT",
    "STRING",
    "LITERAL",
    " ",  # SPACE_CHAR
    "\t",  # TAB_CHAR
    "\r",  # CARRIAGE_CHAR
    "\n",  # NEWLINE_CHAR
    "_",  # IDENT_PREFIX
    ".",  # NUMBER_DELIMITER
    "#",  # COMMENT_PREFIX
    '"',  # QUOTE_CHARS[0]
    "'",  # QUOTE_CHARS[1]
]

CANONICAL_TOKEN_MAP = {
    "ADDITION": CANONICAL_TOKENS[0],
    "SUBTRACTION": CANONICAL_TOKENS[1],
    "MULTIPLICATION": CANONICAL_TOKENS[2],
    "DIVISION": CANONICAL_TOKENS[3],
    "MODULUS": CANONICAL_TOKENS[4],
    "EQUALS": CANONICAL_TOKENS[5],
    "NOT_EQUALS": CANONICAL_TOKENS[6],
    "LESS_THAN": CANONICAL_TOKENS[7],
    "LESS_THAN_EQUAL": CANONICAL_TOKENS[8],
    "GREATER_THAN": CANONICAL_TOKENS[9],
    "GREATER_THAN_EQUAL": CANONICAL_TOKENS[10],
    "LOGICAL_AND": CANONICAL_TOKENS[11],
    "LOGICAL_OR": CANONICAL_TOKENS[12],
    "LOGICAL_NOT": CANONICAL_TOKENS[13],
    "FUNCTION_CALL": CANONICAL_TOKENS[14],
    "PROPAGATE_RESULT": CANONICAL_TOKENS[15],
    "ASSIGNMENT": CANONICAL_TOKENS[16],
    "IF_STATEMENT": CANONICAL_TOKENS[17],
    "ELSE_CLAUSE": CANONICAL_TOKENS[18],
    "FUNCTION_DEFINITION": CANONICAL_TOKENS[19],
    "PRINT_STATEMENT": CANONICAL_TOKENS[20],
    "RETURN_STATEMENT": CANONICAL_TOKENS[21],
    "SKIP_BLOCK": CANONICAL_TOKENS[22],
    "WHILE_LOOP": CANONICAL_TOKENS[23],
    "FOR_LOOP": CANONICAL_TOKENS[24],
    "FOR_RANGE_START": CANONICAL_TOKENS[25],
    "FOR_RANGE_STEP": CANONICAL_TOKENS[26],
    "FOR_RANGE_END": CANONICAL_TOKENS[27],
    "BREAK_LOOP": CANONICAL_TOKENS[28],
    "CONTINUE_LOOP": CANONICAL_TOKENS[29],
    "CLASS_DEFINITION": CANONICAL_TOKENS[30],
    "INHERITANCE": CANONICAL_TOKENS[31],
    "OBJECT_CREATION": CANONICAL_TOKENS[32],
    "THIS_REFERENCE": CANONICAL_TOKENS[33],
    "TRY_BLOCK": CANONICAL_TOKENS[34],
    "CATCH_BLOCK": CANONICAL_TOKENS[35],
    "FINALLY_BLOCK": CANONICAL_TOKENS[36],
    "EXPORT_SYMBOL": CANONICAL_TOKENS[37],
    "IMPORT_MODULE": CANONICAL_TOKENS[38],
    "MODULE_DECLARATION": CANONICAL_TOKENS[39],
    "INPUT_STATEMENT": CANONICAL_TOKENS[40],
    "INPUT_FROM_FILE": CANONICAL_TOKENS[41],
    "BOOLEAN_TRUE": CANONICAL_TOKENS[42],
    "BOOLEAN_FALSE": CANONICAL_TOKENS[43],
    "NULL_LITERAL": CANONICAL_TOKENS[44],
    "OPEN_BRACKET": CANONICAL_TOKENS[45],
    "CLOSE_BRACKET": CANONICAL_TOKENS[46],
    "OPEN_BRACE": CANONICAL_TOKENS[47],
    "CLOSE_BRACE": CANONICAL_TOKENS[48],
    "OPEN_PAREN": CANONICAL_TOKENS[49],
    "CLOSE_PAREN": CANONICAL_TOKENS[50],
    "COMMA_SEPARATOR": CANONICAL_TOKENS[51],
    "COLON_SEPARATOR": CANONICAL_TOKENS[52],
    "DOT_ACCESSOR": CANONICAL_TOKENS[53],
    "END_OF_FILE": CANONICAL_TOKENS[54],
    "IDENTIFIER": CANONICAL_TOKENS[55],
    "LEX_ERROR": CANONICAL_TOKENS[56],
    "INTEGER_LITERAL": CANONICAL_TOKENS[57],
    "FLOAT_LITERAL": CANONICAL_TOKENS[58],
    "STRING_LITERAL": CANONICAL_TOKENS[59],
    "GENERIC_LITERAL": CANONICAL_TOKENS[60],
    "SPACE_CHAR": CANONICAL_TOKENS[61],
    "TAB_CHAR": CANONICAL_TOKENS[62],
    "CARRIAGE_RETURN": CANONICAL_TOKENS[63],
    "NEWLINE_CHAR": CANONICAL_TOKENS[64],
    "IDENTIFIER_PREFIX": CANONICAL_TOKENS[65],
    "DECIMAL_POINT": CANONICAL_TOKENS[66],
    "COMMENT_PREFIX": CANONICAL_TOKENS[67],
    "DOUBLE_QUOTE": CANONICAL_TOKENS[68],
    "SINGLE_QUOTE": CANONICAL_TOKENS[69],
}


# Operator index mapping
operator_tokens = {
    0: CANONICAL_TOKEN_MAP["ADDITION"],
    1: CANONICAL_TOKEN_MAP["SUBTRACTION"],
    2: CANONICAL_TOKEN_MAP["MULTIPLICATION"],
    3: CANONICAL_TOKEN_MAP["DIVISION"],
    4: CANONICAL_TOKEN_MAP["MODULUS"],
    5: CANONICAL_TOKEN_MAP["LOGICAL_AND"],
    6: CANONICAL_TOKEN_MAP["LOGICAL_OR"],
    7: CANONICAL_TOKEN_MAP["LOGICAL_NOT"],
    8: CANONICAL_TOKEN_MAP["LESS_THAN"],
    9: CANONICAL_TOKEN_MAP["LESS_THAN_EQUAL"],
    10: CANONICAL_TOKEN_MAP["GREATER_THAN"],
    11: CANONICAL_TOKEN_MAP["GREATER_THAN_EQUAL"],
    12: CANONICAL_TOKEN_MAP["EQUALS"],
    13: CANONICAL_TOKEN_MAP["NOT_EQUALS"],
    14: CANONICAL_TOKEN_MAP["FUNCTION_CALL"],
    15: CANONICAL_TOKEN_MAP["PROPAGATE_RESULT"],
}


# Token type mapping
token_hashmap = {
    "=": CANONICAL_TOKEN_MAP["ASSIGNMENT"],
    "+": operator_tokens[0],
    "-": operator_tokens[1],
    "*": operator_tokens[2],
    "/": operator_tokens[3],
    "%": operator_tokens[4],
    "==": operator_tokens[12],
    "!=": operator_tokens[13],
    "<": operator_tokens[8],
    "<=": operator_tokens[9],
    ">": operator_tokens[10],
    ">=": operator_tokens[11],
    "EQ": operator_tokens[12],
    "NE": operator_tokens[13],
    "LT": operator_tokens[8],
    "LE": operator_tokens[9],
    "GT": operator_tokens[10],
    "GE": operator_tokens[11],
    "CALL": operator_tokens[14],
    "$": operator_tokens[15],
    "?": CANONICAL_TOKEN_MAP["IF_STATEMENT"],
    "@": CANONICAL_TOKEN_MAP["FUNCTION_DEFINITION"],
    "!": CANONICAL_TOKEN_MAP["PRINT_STATEMENT"],
    "[": CANONICAL_TOKEN_MAP["OPEN_BRACKET"],
    "]": CANONICAL_TOKEN_MAP["CLOSE_BRACKET"],
    "{": CANONICAL_TOKEN_MAP["OPEN_BRACE"],
    "}": CANONICAL_TOKEN_MAP["CLOSE_BRACE"],
    "(": CANONICAL_TOKEN_MAP["OPEN_PAREN"],
    ")": CANONICAL_TOKEN_MAP["CLOSE_PAREN"],
    ",": CANONICAL_TOKEN_MAP["COMMA_SEPARATOR"],
    ":": CANONICAL_TOKEN_MAP["COLON_SEPARATOR"],
    ".": CANONICAL_TOKEN_MAP["DOT_ACCESSOR"],
    "TRUE": CANONICAL_TOKEN_MAP["GENERIC_LITERAL"],
    "FALSE": CANONICAL_TOKEN_MAP["GENERIC_LITERAL"],
    "NULL": CANONICAL_TOKEN_MAP["GENERIC_LITERAL"],
    "INPUT": CANONICAL_TOKEN_MAP["INPUT_STATEMENT"],
    "FROM": CANONICAL_TOKEN_MAP["INPUT_FROM_FILE"],
    "ELSE": CANONICAL_TOKEN_MAP["ELSE_CLAUSE"],
    "TO": CANONICAL_TOKEN_MAP["FOR_RANGE_END"],
    "RETURN": CANONICAL_TOKEN_MAP["RETURN_STATEMENT"],
    "AND": CANONICAL_TOKEN_MAP["LOGICAL_AND"],
    "OR": CANONICAL_TOKEN_MAP["LOGICAL_OR"],
    "NOT": CANONICAL_TOKEN_MAP["LOGICAL_NOT"],
    "WHILE": CANONICAL_TOKEN_MAP["WHILE_LOOP"],
    "FOR": CANONICAL_TOKEN_MAP["FOR_LOOP"],
    "AT": CANONICAL_TOKEN_MAP["FOR_RANGE_START"],
    "BY": CANONICAL_TOKEN_MAP["FOR_RANGE_STEP"],
    "SKIP": CANONICAL_TOKEN_MAP["SKIP_BLOCK"],
    "CLASS": CANONICAL_TOKEN_MAP["CLASS_DEFINITION"],
    "NEW": CANONICAL_TOKEN_MAP["OBJECT_CREATION"],
    "THIS": CANONICAL_TOKEN_MAP["THIS_REFERENCE"],
    "EXTENDS": CANONICAL_TOKEN_MAP["INHERITANCE"],
    "TRY": CANONICAL_TOKEN_MAP["TRY_BLOCK"],
    "CATCH": CANONICAL_TOKEN_MAP["CATCH_BLOCK"],
    "FINALLY": CANONICAL_TOKEN_MAP["FINALLY_BLOCK"],
    "EXPORT": CANONICAL_TOKEN_MAP["EXPORT_SYMBOL"],
    "IMPORT": CANONICAL_TOKEN_MAP["IMPORT_MODULE"],
    "MODULE": CANONICAL_TOKEN_MAP["MODULE_DECLARATION"],
    "BREAK": CANONICAL_TOKEN_MAP["BREAK_LOOP"],
    "CONTINUE": CANONICAL_TOKEN_MAP["CONTINUE_LOOP"],
}

CONTROL_SYMBOLS = [
    "ASSIGN",
    "PLUS",
    "SUB",
    "MULT",
    "DIV",
    "MOD",
    "EQ",
    "NE",
    "LT",
    "LE",
    "GT",
    "GE",
    "AND",
    "OR",
    "NOT",
    "CALL",
    "PROP",
    "INPUT",
    "DELIM_FROM",
    "IF",
    "ELSE",
    "FUNC",
    "PRINT",
    "RETURN",
    "SKIP",
    "LOOP_WHILE",
    "LOOP_FOR",
    "TO",
    "AT",
    "BY",
    "BREAK",
    "CONTINUE",
    "CLASS",
    "EXTENDS",
    "NEW",
    "THIS",
    "TRY",
    "CATCH",
    "FINALLY",
    "EXPORT",
    "IMPORT",
    "MODULE",
    "TRUE",
    "FALSE",
    "NULL",
    "LBRACK",
    "RBRACK",
    "LBRACE",
    "RBRACE",
    "LPAREN",
    "RPAREN",
    "COMMA",
    "COLON",
    "DOT",
]


# Constants for non-symbolic types
TOKEN_EOF = "EOF"
TOKEN_IDENT = "IDENT"
TOKEN_ERROR = "ERROR"
TOKEN_NUMBER = "NUMBER"
TOKEN_FLOAT = "FLOAT"
TOKEN_STRING = "STRING"
TOKEN_LITERAL = "LITERAL"

## SINGLE CHARS
# Character categories
SPACE_CHAR = " "
TAB_CHAR = "\t"
CARRIAGE_CHAR = "\r"
NEWLINE_CHAR = "\n"
IDENT_PREFIX = "_"
NUMBER_DELIMITER = "."
COMMENT_PREFIX = "#"  # If you ever want to make comments start with another symbol

# Groupings
WHITESPACE_CHARS = (SPACE_CHAR, TAB_CHAR, CARRIAGE_CHAR, NEWLINE_CHAR)
QUOTE_CHARS = ('"', "'")
